# modules/audio_filter/Makefile.am automatically generated from modules/audio_filter/Modules.am by modules/genmf
# DO NOT EDIT THIS FILE DIRECTLY! See Modules.am instead.

basedir = audio_filter
libvlc_LTLIBRARIES =  $(LTLIBa52tofloat32) $(LTLIBdtstofloat32) $(LTLIBmpgatofixed32) $(LTLIBsamplerate)
EXTRA_LTLIBRARIES =  liba52tofloat32_plugin.la libdtstofloat32_plugin.la libmpgatofixed32_plugin.la libsamplerate_plugin.la

EXTRA_DIST = Modules.am

include $(top_srcdir)/modules/common.am
include $(srcdir)/Modules.am

if MAINTAINER_MODE
$(srcdir)/Makefile.am: $(srcdir)/Modules.am $(top_srcdir)/modules/genmf
	$(AM_V_GEN)cd \$(top_srcdir) && \$(SHELL) modules/genmf audio_filter
endif

# The a52tofloat32 plugin
if HAVE_WIN32
liba52tofloat32_plugin_la_DEPENDENCIES = liba52tofloat32_plugin.rc.o
endif
liba52tofloat32_plugin_la_SOURCES = $(SOURCES_a52tofloat32)
nodist_liba52tofloat32_plugin_la_SOURCES = $(nodist_SOURCES_a52tofloat32)
# Force per-target objects:
liba52tofloat32_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_a52tofloat32)
liba52tofloat32_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_a52tofloat32)
liba52tofloat32_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_a52tofloat32)
liba52tofloat32_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_a52tofloat32)
# Set LIBADD manually:
liba52tofloat32_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_a52tofloat32)
liba52tofloat32_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_a52tofloat32)

# The a52tospdif plugin
if HAVE_WIN32
liba52tospdif_plugin_la_DEPENDENCIES = liba52tospdif_plugin.rc.o
endif
liba52tospdif_plugin_la_SOURCES = $(SOURCES_a52tospdif)
nodist_liba52tospdif_plugin_la_SOURCES = $(nodist_SOURCES_a52tospdif)
# Force per-target objects:
liba52tospdif_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_a52tospdif)
liba52tospdif_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_a52tospdif)
liba52tospdif_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_a52tospdif)
liba52tospdif_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_a52tospdif)
# Set LIBADD manually:
liba52tospdif_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_a52tospdif)
liba52tospdif_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_a52tospdif)

# The audiobargraph_a plugin
if HAVE_WIN32
libaudiobargraph_a_plugin_la_DEPENDENCIES = libaudiobargraph_a_plugin.rc.o
endif
libaudiobargraph_a_plugin_la_SOURCES = $(SOURCES_audiobargraph_a)
nodist_libaudiobargraph_a_plugin_la_SOURCES = $(nodist_SOURCES_audiobargraph_a)
# Force per-target objects:
libaudiobargraph_a_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_audiobargraph_a)
libaudiobargraph_a_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_audiobargraph_a)
libaudiobargraph_a_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_audiobargraph_a)
libaudiobargraph_a_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_audiobargraph_a)
# Set LIBADD manually:
libaudiobargraph_a_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_audiobargraph_a)
libaudiobargraph_a_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_audiobargraph_a)

# The bandlimited_resampler plugin
if HAVE_WIN32
libbandlimited_resampler_plugin_la_DEPENDENCIES = libbandlimited_resampler_plugin.rc.o
endif
libbandlimited_resampler_plugin_la_SOURCES = $(SOURCES_bandlimited_resampler)
nodist_libbandlimited_resampler_plugin_la_SOURCES = $(nodist_SOURCES_bandlimited_resampler)
# Force per-target objects:
libbandlimited_resampler_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_bandlimited_resampler)
libbandlimited_resampler_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_bandlimited_resampler)
libbandlimited_resampler_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_bandlimited_resampler)
libbandlimited_resampler_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_bandlimited_resampler)
# Set LIBADD manually:
libbandlimited_resampler_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_bandlimited_resampler)
libbandlimited_resampler_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_bandlimited_resampler)

# The chorus_flanger plugin
if HAVE_WIN32
libchorus_flanger_plugin_la_DEPENDENCIES = libchorus_flanger_plugin.rc.o
endif
libchorus_flanger_plugin_la_SOURCES = $(SOURCES_chorus_flanger)
nodist_libchorus_flanger_plugin_la_SOURCES = $(nodist_SOURCES_chorus_flanger)
# Force per-target objects:
libchorus_flanger_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_chorus_flanger)
libchorus_flanger_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_chorus_flanger)
libchorus_flanger_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_chorus_flanger)
libchorus_flanger_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_chorus_flanger)
# Set LIBADD manually:
libchorus_flanger_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_chorus_flanger)
libchorus_flanger_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_chorus_flanger)

# The compressor plugin
if HAVE_WIN32
libcompressor_plugin_la_DEPENDENCIES = libcompressor_plugin.rc.o
endif
libcompressor_plugin_la_SOURCES = $(SOURCES_compressor)
nodist_libcompressor_plugin_la_SOURCES = $(nodist_SOURCES_compressor)
# Force per-target objects:
libcompressor_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_compressor)
libcompressor_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_compressor)
libcompressor_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_compressor)
libcompressor_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_compressor)
# Set LIBADD manually:
libcompressor_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_compressor)
libcompressor_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_compressor)

# The dolby_surround_decoder plugin
if HAVE_WIN32
libdolby_surround_decoder_plugin_la_DEPENDENCIES = libdolby_surround_decoder_plugin.rc.o
endif
libdolby_surround_decoder_plugin_la_SOURCES = $(SOURCES_dolby_surround_decoder)
nodist_libdolby_surround_decoder_plugin_la_SOURCES = $(nodist_SOURCES_dolby_surround_decoder)
# Force per-target objects:
libdolby_surround_decoder_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_dolby_surround_decoder)
libdolby_surround_decoder_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_dolby_surround_decoder)
libdolby_surround_decoder_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_dolby_surround_decoder)
libdolby_surround_decoder_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_dolby_surround_decoder)
# Set LIBADD manually:
libdolby_surround_decoder_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_dolby_surround_decoder)
libdolby_surround_decoder_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_dolby_surround_decoder)

# The dtstofloat32 plugin
if HAVE_WIN32
libdtstofloat32_plugin_la_DEPENDENCIES = libdtstofloat32_plugin.rc.o
endif
libdtstofloat32_plugin_la_SOURCES = $(SOURCES_dtstofloat32)
nodist_libdtstofloat32_plugin_la_SOURCES = $(nodist_SOURCES_dtstofloat32)
# Force per-target objects:
libdtstofloat32_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_dtstofloat32)
libdtstofloat32_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_dtstofloat32)
libdtstofloat32_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_dtstofloat32)
libdtstofloat32_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_dtstofloat32)
# Set LIBADD manually:
libdtstofloat32_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_dtstofloat32)
libdtstofloat32_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_dtstofloat32)

# The dtstospdif plugin
if HAVE_WIN32
libdtstospdif_plugin_la_DEPENDENCIES = libdtstospdif_plugin.rc.o
endif
libdtstospdif_plugin_la_SOURCES = $(SOURCES_dtstospdif)
nodist_libdtstospdif_plugin_la_SOURCES = $(nodist_SOURCES_dtstospdif)
# Force per-target objects:
libdtstospdif_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_dtstospdif)
libdtstospdif_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_dtstospdif)
libdtstospdif_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_dtstospdif)
libdtstospdif_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_dtstospdif)
# Set LIBADD manually:
libdtstospdif_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_dtstospdif)
libdtstospdif_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_dtstospdif)

# The equalizer plugin
if HAVE_WIN32
libequalizer_plugin_la_DEPENDENCIES = libequalizer_plugin.rc.o
endif
libequalizer_plugin_la_SOURCES = $(SOURCES_equalizer)
nodist_libequalizer_plugin_la_SOURCES = $(nodist_SOURCES_equalizer)
# Force per-target objects:
libequalizer_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_equalizer)
libequalizer_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_equalizer)
libequalizer_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_equalizer)
libequalizer_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_equalizer)
# Set LIBADD manually:
libequalizer_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_equalizer)
libequalizer_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_equalizer)

# The gain plugin
if HAVE_WIN32
libgain_plugin_la_DEPENDENCIES = libgain_plugin.rc.o
endif
libgain_plugin_la_SOURCES = $(SOURCES_gain)
nodist_libgain_plugin_la_SOURCES = $(nodist_SOURCES_gain)
# Force per-target objects:
libgain_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_gain)
libgain_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_gain)
libgain_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_gain)
libgain_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_gain)
# Set LIBADD manually:
libgain_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_gain)
libgain_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_gain)

# The headphone_channel_mixer plugin
if HAVE_WIN32
libheadphone_channel_mixer_plugin_la_DEPENDENCIES = libheadphone_channel_mixer_plugin.rc.o
endif
libheadphone_channel_mixer_plugin_la_SOURCES = $(SOURCES_headphone_channel_mixer)
nodist_libheadphone_channel_mixer_plugin_la_SOURCES = $(nodist_SOURCES_headphone_channel_mixer)
# Force per-target objects:
libheadphone_channel_mixer_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_headphone_channel_mixer)
libheadphone_channel_mixer_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_headphone_channel_mixer)
libheadphone_channel_mixer_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_headphone_channel_mixer)
libheadphone_channel_mixer_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_headphone_channel_mixer)
# Set LIBADD manually:
libheadphone_channel_mixer_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_headphone_channel_mixer)
libheadphone_channel_mixer_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_headphone_channel_mixer)

# The karaoke plugin
if HAVE_WIN32
libkaraoke_plugin_la_DEPENDENCIES = libkaraoke_plugin.rc.o
endif
libkaraoke_plugin_la_SOURCES = $(SOURCES_karaoke)
nodist_libkaraoke_plugin_la_SOURCES = $(nodist_SOURCES_karaoke)
# Force per-target objects:
libkaraoke_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_karaoke)
libkaraoke_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_karaoke)
libkaraoke_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_karaoke)
libkaraoke_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_karaoke)
# Set LIBADD manually:
libkaraoke_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_karaoke)
libkaraoke_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_karaoke)

# The mono plugin
if HAVE_WIN32
libmono_plugin_la_DEPENDENCIES = libmono_plugin.rc.o
endif
libmono_plugin_la_SOURCES = $(SOURCES_mono)
nodist_libmono_plugin_la_SOURCES = $(nodist_SOURCES_mono)
# Force per-target objects:
libmono_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_mono)
libmono_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_mono)
libmono_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_mono)
libmono_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_mono)
# Set LIBADD manually:
libmono_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_mono)
libmono_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_mono)

# The mpgatofixed32 plugin
if HAVE_WIN32
libmpgatofixed32_plugin_la_DEPENDENCIES = libmpgatofixed32_plugin.rc.o
endif
libmpgatofixed32_plugin_la_SOURCES = $(SOURCES_mpgatofixed32)
nodist_libmpgatofixed32_plugin_la_SOURCES = $(nodist_SOURCES_mpgatofixed32)
# Force per-target objects:
libmpgatofixed32_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_mpgatofixed32)
libmpgatofixed32_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_mpgatofixed32)
libmpgatofixed32_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_mpgatofixed32)
libmpgatofixed32_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_mpgatofixed32)
# Set LIBADD manually:
libmpgatofixed32_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_mpgatofixed32)
libmpgatofixed32_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_mpgatofixed32)

# The normvol plugin
if HAVE_WIN32
libnormvol_plugin_la_DEPENDENCIES = libnormvol_plugin.rc.o
endif
libnormvol_plugin_la_SOURCES = $(SOURCES_normvol)
nodist_libnormvol_plugin_la_SOURCES = $(nodist_SOURCES_normvol)
# Force per-target objects:
libnormvol_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_normvol)
libnormvol_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_normvol)
libnormvol_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_normvol)
libnormvol_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_normvol)
# Set LIBADD manually:
libnormvol_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_normvol)
libnormvol_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_normvol)

# The param_eq plugin
if HAVE_WIN32
libparam_eq_plugin_la_DEPENDENCIES = libparam_eq_plugin.rc.o
endif
libparam_eq_plugin_la_SOURCES = $(SOURCES_param_eq)
nodist_libparam_eq_plugin_la_SOURCES = $(nodist_SOURCES_param_eq)
# Force per-target objects:
libparam_eq_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_param_eq)
libparam_eq_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_param_eq)
libparam_eq_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_param_eq)
libparam_eq_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_param_eq)
# Set LIBADD manually:
libparam_eq_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_param_eq)
libparam_eq_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_param_eq)

# The remap plugin
if HAVE_WIN32
libremap_plugin_la_DEPENDENCIES = libremap_plugin.rc.o
endif
libremap_plugin_la_SOURCES = $(SOURCES_remap)
nodist_libremap_plugin_la_SOURCES = $(nodist_SOURCES_remap)
# Force per-target objects:
libremap_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_remap)
libremap_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_remap)
libremap_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_remap)
libremap_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_remap)
# Set LIBADD manually:
libremap_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_remap)
libremap_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_remap)

# The samplerate plugin
if HAVE_WIN32
libsamplerate_plugin_la_DEPENDENCIES = libsamplerate_plugin.rc.o
endif
libsamplerate_plugin_la_SOURCES = $(SOURCES_samplerate)
nodist_libsamplerate_plugin_la_SOURCES = $(nodist_SOURCES_samplerate)
# Force per-target objects:
libsamplerate_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_samplerate)
libsamplerate_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_samplerate)
libsamplerate_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_samplerate)
libsamplerate_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_samplerate)
# Set LIBADD manually:
libsamplerate_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_samplerate)
libsamplerate_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_samplerate)

# The scaletempo plugin
if HAVE_WIN32
libscaletempo_plugin_la_DEPENDENCIES = libscaletempo_plugin.rc.o
endif
libscaletempo_plugin_la_SOURCES = $(SOURCES_scaletempo)
nodist_libscaletempo_plugin_la_SOURCES = $(nodist_SOURCES_scaletempo)
# Force per-target objects:
libscaletempo_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_scaletempo)
libscaletempo_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_scaletempo)
libscaletempo_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_scaletempo)
libscaletempo_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_scaletempo)
# Set LIBADD manually:
libscaletempo_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_scaletempo)
libscaletempo_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_scaletempo)

# The simple_channel_mixer plugin
if HAVE_WIN32
libsimple_channel_mixer_plugin_la_DEPENDENCIES = libsimple_channel_mixer_plugin.rc.o
endif
libsimple_channel_mixer_plugin_la_SOURCES = $(SOURCES_simple_channel_mixer)
nodist_libsimple_channel_mixer_plugin_la_SOURCES = $(nodist_SOURCES_simple_channel_mixer)
# Force per-target objects:
libsimple_channel_mixer_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_simple_channel_mixer)
libsimple_channel_mixer_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_simple_channel_mixer)
libsimple_channel_mixer_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_simple_channel_mixer)
libsimple_channel_mixer_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_simple_channel_mixer)
# Set LIBADD manually:
libsimple_channel_mixer_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_simple_channel_mixer)
libsimple_channel_mixer_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_simple_channel_mixer)

# The spatializer plugin
if HAVE_WIN32
libspatializer_plugin_la_DEPENDENCIES = libspatializer_plugin.rc.o
endif
libspatializer_plugin_la_SOURCES = $(SOURCES_spatializer)
nodist_libspatializer_plugin_la_SOURCES = $(nodist_SOURCES_spatializer)
# Force per-target objects:
libspatializer_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_spatializer)
libspatializer_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_spatializer)
libspatializer_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_spatializer)
libspatializer_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_spatializer)
# Set LIBADD manually:
libspatializer_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_spatializer)
libspatializer_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_spatializer)

# The stereo_widen plugin
if HAVE_WIN32
libstereo_widen_plugin_la_DEPENDENCIES = libstereo_widen_plugin.rc.o
endif
libstereo_widen_plugin_la_SOURCES = $(SOURCES_stereo_widen)
nodist_libstereo_widen_plugin_la_SOURCES = $(nodist_SOURCES_stereo_widen)
# Force per-target objects:
libstereo_widen_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_stereo_widen)
libstereo_widen_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_stereo_widen)
libstereo_widen_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_stereo_widen)
libstereo_widen_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_stereo_widen)
# Set LIBADD manually:
libstereo_widen_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_stereo_widen)
libstereo_widen_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_stereo_widen)

# The trivial_channel_mixer plugin
if HAVE_WIN32
libtrivial_channel_mixer_plugin_la_DEPENDENCIES = libtrivial_channel_mixer_plugin.rc.o
endif
libtrivial_channel_mixer_plugin_la_SOURCES = $(SOURCES_trivial_channel_mixer)
nodist_libtrivial_channel_mixer_plugin_la_SOURCES = $(nodist_SOURCES_trivial_channel_mixer)
# Force per-target objects:
libtrivial_channel_mixer_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_trivial_channel_mixer)
libtrivial_channel_mixer_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_trivial_channel_mixer)
libtrivial_channel_mixer_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_trivial_channel_mixer)
libtrivial_channel_mixer_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_trivial_channel_mixer)
# Set LIBADD manually:
libtrivial_channel_mixer_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_trivial_channel_mixer)
libtrivial_channel_mixer_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_trivial_channel_mixer)

# The ugly_resampler plugin
if HAVE_WIN32
libugly_resampler_plugin_la_DEPENDENCIES = libugly_resampler_plugin.rc.o
endif
libugly_resampler_plugin_la_SOURCES = $(SOURCES_ugly_resampler)
nodist_libugly_resampler_plugin_la_SOURCES = $(nodist_SOURCES_ugly_resampler)
# Force per-target objects:
libugly_resampler_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_ugly_resampler)
libugly_resampler_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_ugly_resampler)
libugly_resampler_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_ugly_resampler)
libugly_resampler_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_ugly_resampler)
# Set LIBADD manually:
libugly_resampler_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_ugly_resampler)
libugly_resampler_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_ugly_resampler)

