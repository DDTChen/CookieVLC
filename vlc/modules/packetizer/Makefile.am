# modules/packetizer/Makefile.am automatically generated from modules/packetizer/Modules.am by modules/genmf
# DO NOT EDIT THIS FILE DIRECTLY! See Modules.am instead.

basedir = packetizer
libvlc_LTLIBRARIES = 
EXTRA_LTLIBRARIES = 

EXTRA_DIST = Modules.am

include $(top_srcdir)/modules/common.am
include $(srcdir)/Modules.am

if MAINTAINER_MODE
$(srcdir)/Makefile.am: $(srcdir)/Modules.am $(top_srcdir)/modules/genmf
	$(AM_V_GEN)cd \$(top_srcdir) && \$(SHELL) modules/genmf packetizer
endif

# The packetizer_copy plugin
if HAVE_WIN32
libpacketizer_copy_plugin_la_DEPENDENCIES = libpacketizer_copy_plugin.rc.o
endif
libpacketizer_copy_plugin_la_SOURCES = $(SOURCES_packetizer_copy)
nodist_libpacketizer_copy_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_copy)
# Force per-target objects:
libpacketizer_copy_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_copy)
libpacketizer_copy_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_copy)
libpacketizer_copy_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_copy)
libpacketizer_copy_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_copy)
# Set LIBADD manually:
libpacketizer_copy_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_copy)
libpacketizer_copy_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_copy)

# The packetizer_dirac plugin
if HAVE_WIN32
libpacketizer_dirac_plugin_la_DEPENDENCIES = libpacketizer_dirac_plugin.rc.o
endif
libpacketizer_dirac_plugin_la_SOURCES = $(SOURCES_packetizer_dirac)
nodist_libpacketizer_dirac_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_dirac)
# Force per-target objects:
libpacketizer_dirac_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_dirac)
libpacketizer_dirac_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_dirac)
libpacketizer_dirac_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_dirac)
libpacketizer_dirac_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_dirac)
# Set LIBADD manually:
libpacketizer_dirac_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_dirac)
libpacketizer_dirac_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_dirac)

# The packetizer_flac plugin
if HAVE_WIN32
libpacketizer_flac_plugin_la_DEPENDENCIES = libpacketizer_flac_plugin.rc.o
endif
libpacketizer_flac_plugin_la_SOURCES = $(SOURCES_packetizer_flac)
nodist_libpacketizer_flac_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_flac)
# Force per-target objects:
libpacketizer_flac_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_flac)
libpacketizer_flac_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_flac)
libpacketizer_flac_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_flac)
libpacketizer_flac_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_flac)
# Set LIBADD manually:
libpacketizer_flac_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_flac)
libpacketizer_flac_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_flac)

# The packetizer_h264 plugin
if HAVE_WIN32
libpacketizer_h264_plugin_la_DEPENDENCIES = libpacketizer_h264_plugin.rc.o
endif
libpacketizer_h264_plugin_la_SOURCES = $(SOURCES_packetizer_h264)
nodist_libpacketizer_h264_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_h264)
# Force per-target objects:
libpacketizer_h264_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_h264)
libpacketizer_h264_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_h264)
libpacketizer_h264_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_h264)
libpacketizer_h264_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_h264)
# Set LIBADD manually:
libpacketizer_h264_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_h264)
libpacketizer_h264_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_h264)

# The packetizer_mlp plugin
if HAVE_WIN32
libpacketizer_mlp_plugin_la_DEPENDENCIES = libpacketizer_mlp_plugin.rc.o
endif
libpacketizer_mlp_plugin_la_SOURCES = $(SOURCES_packetizer_mlp)
nodist_libpacketizer_mlp_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_mlp)
# Force per-target objects:
libpacketizer_mlp_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_mlp)
libpacketizer_mlp_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_mlp)
libpacketizer_mlp_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_mlp)
libpacketizer_mlp_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_mlp)
# Set LIBADD manually:
libpacketizer_mlp_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_mlp)
libpacketizer_mlp_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_mlp)

# The packetizer_mpeg4audio plugin
if HAVE_WIN32
libpacketizer_mpeg4audio_plugin_la_DEPENDENCIES = libpacketizer_mpeg4audio_plugin.rc.o
endif
libpacketizer_mpeg4audio_plugin_la_SOURCES = $(SOURCES_packetizer_mpeg4audio)
nodist_libpacketizer_mpeg4audio_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_mpeg4audio)
# Force per-target objects:
libpacketizer_mpeg4audio_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_mpeg4audio)
libpacketizer_mpeg4audio_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_mpeg4audio)
libpacketizer_mpeg4audio_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_mpeg4audio)
libpacketizer_mpeg4audio_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_mpeg4audio)
# Set LIBADD manually:
libpacketizer_mpeg4audio_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_mpeg4audio)
libpacketizer_mpeg4audio_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_mpeg4audio)

# The packetizer_mpeg4video plugin
if HAVE_WIN32
libpacketizer_mpeg4video_plugin_la_DEPENDENCIES = libpacketizer_mpeg4video_plugin.rc.o
endif
libpacketizer_mpeg4video_plugin_la_SOURCES = $(SOURCES_packetizer_mpeg4video)
nodist_libpacketizer_mpeg4video_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_mpeg4video)
# Force per-target objects:
libpacketizer_mpeg4video_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_mpeg4video)
libpacketizer_mpeg4video_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_mpeg4video)
libpacketizer_mpeg4video_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_mpeg4video)
libpacketizer_mpeg4video_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_mpeg4video)
# Set LIBADD manually:
libpacketizer_mpeg4video_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_mpeg4video)
libpacketizer_mpeg4video_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_mpeg4video)

# The packetizer_mpegvideo plugin
if HAVE_WIN32
libpacketizer_mpegvideo_plugin_la_DEPENDENCIES = libpacketizer_mpegvideo_plugin.rc.o
endif
libpacketizer_mpegvideo_plugin_la_SOURCES = $(SOURCES_packetizer_mpegvideo)
nodist_libpacketizer_mpegvideo_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_mpegvideo)
# Force per-target objects:
libpacketizer_mpegvideo_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_mpegvideo)
libpacketizer_mpegvideo_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_mpegvideo)
libpacketizer_mpegvideo_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_mpegvideo)
libpacketizer_mpegvideo_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_mpegvideo)
# Set LIBADD manually:
libpacketizer_mpegvideo_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_mpegvideo)
libpacketizer_mpegvideo_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_mpegvideo)

# The packetizer_vc1 plugin
if HAVE_WIN32
libpacketizer_vc1_plugin_la_DEPENDENCIES = libpacketizer_vc1_plugin.rc.o
endif
libpacketizer_vc1_plugin_la_SOURCES = $(SOURCES_packetizer_vc1)
nodist_libpacketizer_vc1_plugin_la_SOURCES = $(nodist_SOURCES_packetizer_vc1)
# Force per-target objects:
libpacketizer_vc1_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) $(CPPFLAGS_packetizer_vc1)
libpacketizer_vc1_plugin_la_CFLAGS = $(AM_CFLAGS) $(CFLAGS_packetizer_vc1)
libpacketizer_vc1_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(CXXFLAGS_packetizer_vc1)
libpacketizer_vc1_plugin_la_OBJCFLAGS = $(AM_OBJCFLAGS) $(OBJCFLAGS_packetizer_vc1)
# Set LIBADD manually:
libpacketizer_vc1_plugin_la_LIBADD = $(AM_LIBADD) $(LIBS_packetizer_vc1)
libpacketizer_vc1_plugin_la_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS_packetizer_vc1)

